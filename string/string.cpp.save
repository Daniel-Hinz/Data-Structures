// Daniel Hinz
// String.cpp
// 2/24/2019

#include "string.hpp"
#include <iostream>

String::String() {
   str[0] = '\0';
}

String::String(char ch) : String() {
   str[0] = ch;
   str[1] = '\0';      
}

String::String(const char ch[]) {
  int count = 0; 
  while (str[count] != 0){
     ++count;
  }
  str[count] = ch[count];
}

String::String(int n) {
  
}

String::String(int n, const char cArray[]) {
  
}

String::~String() {
  delete [] str;
}

String::String(const String& st) {
  for (int i = 0; i < stringSize; ++i) {
    st[i] = st.str[i];
  }
}

void String::swap(String& st) {
  int *tmp = str;
  str = st.str;
  st.str = tmp;
  int temp = stringSize;
  stringSize = st.stringSize;
  st.stringSize = temp;
}

String String::operator=(String st) {
  swap(st);
  return *this;
}

String String::operator+(const String &rhs) const {
   String rtn;
   int i = 0;
   while (str[i] != 0) {
      rtn.str[i] = str[i];
   }
   int j = 0;
   while (rhs[j] != 0){
      rtn.str[j+i] = rhs.str[j];
   }
   rtn.str[j + i] = 0;
   return rtn;
}

bool String::operator==( const String& rhs) const{
   if (length() == rhs.length()) { 	
         for (int i = 0; i < length(); ++i) {
         if (str[i] != rhs.str[i]) {
            return false;
         }
      }
      return true;
   }
   return false;
}

bool operator!=(const String &lhs, const String &rhs) {
   return !(lhs.operator==(rhs)); 
}

bool String::operator<(const String &rhs) const {
   int i = 0; 
   while ((str[i] != 0) && (str[i] == rhs.str[i])) {
      ++i;
   }
   return str[i] < rhs.str[i];
}

bool operator>(const String &lhs, const String &rhs){
   return (rhs < lhs);
}

bool operator>= (const String &lhs, const String &rhs) {
   return !(lhs < rhs);
}

bool operator<= (const String &lhs, const String &rhs) {
   return !(rhs < lhs);
}

String &String::operator+=(const String &rhs) {
   *this = operator+(rhs);
   return *this;
}

char &String::operator[](int i) {
   return str[i];
}

char String::operator[](int i) const {
   return str[i];
}

int String::length() const{
   int count = 0; 
      while (str[count] != 0) {
         ++count;
      }
   return count;
}

int String::capacity() const {
   return STRING_SIZE - 1;
}

String String::substr(int start, int end) {
   String substring;
   for (int i = start; i <= end; ++i) {
      substring[i] = str[i];
   }
   return substring;
}

int String::findch(int pos, char ch) {
   for (int i = pos; i < STRING_SIZE; ++i) {
      if (str[i] == ch) {
         return i; 
      }
   }
   return -1;
}

int String::findstr(int pos, const String& s) {
   for (int i = pos; i < length(); ++i) {
      if (substr(i, s.length()) == s) {
         return i;
      }
   }
   return -1;
}

String operator+(const char lhs[], const String& rhs) {
   return String(lhs) + rhs;
}

String operator+(char lhs, const String& rhs) {
   return String(lhs) + rhs;
}
bool operator==(const char lhs[], const String& rhs) {
   return String(lhs) == rhs;
}

bool operator==(char lhs, const String& rhs) {
   return String(lhs) == rhs;
}

bool operator<(const char lhs[], const String& rhs) {
   return String(lhs) < rhs;
}

bool operator<(char lhs, const String& rhs) {
   return String(lhs) < rhs;
}

std::ostream& operator<<(std::ostream& out, const String& rhs[]) {
   out << rhs;
   return out;
}

std::istream& operator>>(std::istream& in, String &s) {
   in >> s.str;
   return in;
}

void String::resetCapacity(int n) {
  int smaller = stringSize;
  if (smaller > n){
    stringSize = n;
  }
  stringSize = n;
  int *tmp = new int[cap];

  for (int i = 0; i < stringSize; ++i) {
    tmp[i] = str[i];
  }
  
  delete [] str;
  str = tmp; 
}
